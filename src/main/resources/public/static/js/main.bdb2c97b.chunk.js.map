{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","roomIds","slectedRoom","userId","requestType","toastMsg","id","title","content","systemErrorCount","roomsDataManager","DataManager","url","adaptor","WebApiAdaptor","scheduleDataManager","crudUrl","UrlAdaptor","scheduleObj","roomlistBoxObj","toastInstance","roomDrowDownList","onRoomListBoxChange","bind","onScheduleActionBegin","onEditSchedulePopupOpen","onEditSchedulePopupClose","onScheduleActionComplete","onScheduleActionFailure","onRoomListBoxActionComplete","args","clickedRoomName","event","target","innerText","i","items","length","Name","Id","value","this","setState","selectedRooms","result","map","e","current","selectedOneRoom","data","Subject","show","applyScheduleCategoryColor","currentView","categoryColor","Color","element","firstChild","style","borderLeftColor","backgroundColor","type","recurrenceElm","document","querySelector","undefined","classList","remove","oldLocalElm","parentElm","parentNode","newLocalElm","createElement","className","setAttribute","insertBefore","container","inputEle","attrs","name","appendChild","DropDownList","dataSource","fields","text","floatLabelType","placeholder","htmlAttributes","appendTo","roomElm","RoomId","UserId","msg","json","JSON","parse","error","response","messages","join","message","prevState","ref","selectionSettings","selectAll","change","actionComplete","itemTemplate","eventSettings","query","Query","addParams","enableTooltip","selectedDate","Date","actionFailure","actionBegin","eventRendered","onScheduleEventRendered","popupOpen","popupClose","option","services","Day","Week","WorkWeek","Month","Agenda","toast","newestOnTop","showProgressBar","progressDirection","position","X","Y","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bdb2c97b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport { ScheduleComponent, Day, Week, WorkWeek, Agenda, Month, Inject,\n  ViewsDirective, ViewDirective } \n  from '@syncfusion/ej2-react-schedule';\nimport { DataManager, UrlAdaptor, WebApiAdaptor, Query } from '@syncfusion/ej2-data';\nimport { ListBoxComponent, DropDownList } from '@syncfusion/ej2-react-dropdowns';\nimport { ToastComponent } from '@syncfusion/ej2-react-notifications';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      roomIds: [],\n      slectedRoom: 0,\n      userId: 1,\n      requestType: '',\n      toastMsg: {\n        id: 0,\n        title: 'Message',\n        content: ''\n      },\n      systemErrorCount: 0\n    };\n\n    this.roomsDataManager = new DataManager({\n        url: 'http://localhost:8000/api/room/list',\n        adaptor: new WebApiAdaptor(),\n    });\n    \n    this.scheduleDataManager = new DataManager({\n      url: 'http://localhost:8000/api/schedule/list',\n      crudUrl: 'http://localhost:8000/api/schedule/syncfusion',\n      adaptor: new UrlAdaptor()\n    });\n\n    this.scheduleObj = {};\n    this.roomlistBoxObj = {};\n    this.toastInstance = {};\n    this.roomDrowDownList = {};\n\n    this.onRoomListBoxChange = this.onRoomListBoxChange.bind(this);\n    this.onScheduleActionBegin = this.onScheduleActionBegin.bind(this);\n    this.onEditSchedulePopupOpen = this.onEditSchedulePopupOpen.bind(this);\n    this.onEditSchedulePopupClose = this.onEditSchedulePopupClose.bind(this);\n    this.onScheduleActionComplete = this.onScheduleActionComplete.bind(this);\n    this.onScheduleActionFailure = this.onScheduleActionFailure.bind(this);\n    this.onRoomListBoxActionComplete = this.onRoomListBoxActionComplete.bind(this);\n  }\n  \n  onRoomListBoxChange(args) {\n    let slectedRoom = 0;\n    // Find the lastest selected room\n    let clickedRoomName = args.event.target.innerText;\n    for (let i = 0; i < args.items.length; i++) {\n      if (args.items[i].Name === clickedRoomName) {\n        slectedRoom = args.items[i].Id;\n        break;\n      }\n    }\n\n    // In case just only 1 room is selectd\n    if (slectedRoom === 0 && args.value.length > 0) {\n      slectedRoom = args.value[0];\n    }\n\n    this.setState({ \n      roomIds: args.value,\n      slectedRoom: slectedRoom\n    }, () => {});\n  }\n\n  onRoomListBoxActionComplete(args) {\n    let selectedRooms = args.result.map(e => e.Id);\n    this.roomlistBoxObj.current.value = selectedRooms;\n\n    let selectedOneRoom = 0;\n    if (selectedRooms.length > 0) {\n      selectedOneRoom = selectedRooms[0];\n    }\n\n    this.setState({ \n      roomIds: selectedRooms,\n      slectedRoom: selectedOneRoom\n    }, () => {});\n  }\n  \n  onScheduleActionBegin(args) {\n    this.setState({requestType: args.requestType});\n  }\n\n  onScheduleActionComplete(args) {\n    if (args.requestType === 'eventCreated') {\n      this.setState({ toastMsg: { title: 'Create event', content: 'Event `' + args.data[0].Subject + '` is created' }\n      }, () => {\n          this.toastInstance.show();\n      });\n    } else if (args.requestType === 'eventChanged') {\n      this.setState({ toastMsg: { title: 'Edit event', content: 'Event `' + args.data[0].Subject + '` is changed' }\n      }, () => {\n          this.toastInstance.show();\n      });\n    } else if (args.requestType === 'eventRemoved') {\n      this.setState({ toastMsg: { title: 'Delete event', content: 'Event `' + args.data[0].Subject + '` is removed' }\n      }, () => {\n          this.toastInstance.show();\n      });\n    }\n  }\n  \n  onScheduleEventRendered(args) {\n    this.applyScheduleCategoryColor(args, this.scheduleObj.currentView);\n  }\n\n  applyScheduleCategoryColor(args, currentView) {\n    let categoryColor = args.data.Color;\n    if (!args.element || !categoryColor) {\n        return;\n    }\n    if (currentView === 'Agenda') {\n        args.element.firstChild.style.borderLeftColor = categoryColor;\n    } else {\n        args.element.style.backgroundColor = categoryColor;\n    }\n  }\n\n  onEditSchedulePopupOpen(args) { \n    if (args.type === 'Editor') { \n      // Force open RecurrenceEditor form\n      let recurrenceElm = document.querySelector('.e-recurrenceeditor');\n      if (recurrenceElm !== undefined) {\n        recurrenceElm.classList.remove('e-disable');\n      }\n\n      // Add room list selectbox\n      if (!args.element.querySelector('.e-location-container-DropDownList')) {\n        let oldLocalElm = args.element.querySelector('.e-location-container');\n        let parentElm = oldLocalElm.parentNode;\n        let newLocalElm = document.createElement('div', { className: 'e-location-container' });\n        newLocalElm.setAttribute('class', 'e-location-container e-location-container-DropDownList');\n        parentElm.insertBefore(newLocalElm, oldLocalElm);\n        oldLocalElm.remove();\n\n        let container = document.createElement('div', { className: 'custom-field-container' });\n        let inputEle = document.createElement('input', {\n          className: 'e-field', attrs: { id: 'Location', name: 'Location' }\n        });\n        container.appendChild(inputEle);\n        newLocalElm.appendChild(container);\n\n        this.roomDrowDownList = new DropDownList({\n          dataSource: this.roomsDataManager,\n          fields: { text: 'Name', value: 'Id' },\n          floatLabelType: 'Always', placeholder: 'Room',\n          value: this.state.slectedRoom,\n          htmlAttributes: {'id': 'RoomId', 'name': 'RoomId', 'data-name': 'RoomId'}\n        });\n        this.roomDrowDownList.appendTo(inputEle);\n      } else {\n        // Set selected room whenever edit open\n        this.roomDrowDownList.value = this.state.slectedRoom;\n      }\n    }\n  }\n\n  onEditSchedulePopupClose(args) {\n    // Add roomId & userId to data model before submit\n    let roomElm = args.element.querySelector('[name=\"RoomId\"]');\n    if (roomElm && args.data) {\n      (args.data).RoomId = roomElm.value;\n      (args.data).UserId = this.state.userId;\n    }\n  }\n  \n  onScheduleActionFailure(args) {\n    let msg = 'The error is occurred';\n    try { // View error message of any schedule action errors\n      let json = JSON.parse(args.error[0].error.response);\n      if (json.messages !== undefined && json.messages.length > 0) {\n        msg = json.messages.join('; ');\n      } else {\n        msg = json.message;\n      }\n      this.setState((prevState) => ({\n        toastMsg: { id: 0, title: 'Error', content: msg },\n        systemErrorCount: 0\n      }), \n      () => {\n        this.toastInstance.show();\n      });\n    } catch(e) { \n      // Just view system error 1 time\n      if (this.state.systemErrorCount === 0) {\n        this.setState((prevState) => ({\n          toastMsg: { id: 0, title: 'Error', content: msg },\n          systemErrorCount: 1\n        }), \n        () => {\n          this.toastInstance.show();\n        });\n      }\n    }\n  } \n    \n  render() {\n    return <div>\n      <div>\n        <ListBoxComponent ref={this.roomlistBoxObj}\n          dataSource={this.roomsDataManager} \n          fields={{text: \"Name\", value: \"Id\", Color: \"Color\"}}\n          selectionSettings= {{ selectAll: true }}\n          change={this.onRoomListBoxChange} \n          actionComplete = {this.onRoomListBoxActionComplete}\n          itemTemplate='<div class=\"list-wrapper\" style=\"background-color: ${Color}\"><span class=\"text\">${Name}</span>'/>\n      </div>\n      <div>\n        <ScheduleComponent ref={this.scheduleObj}\n              eventSettings={{dataSource: this.scheduleDataManager, \n                query: new Query().addParams('RoomIds', this.state.roomIds)\n                  .addParams('RequestType', this.state.requestType), \n                enableTooltip: true}} \n              selectedDate={new Date()} currentView='WorkWeek'\n              actionFailure={this.onScheduleActionFailure.bind(this)}\n              actionBegin={this.onScheduleActionBegin.bind(this)}\n              actionComplete={this.onScheduleActionComplete.bind(this)}\n              eventRendered={this.onScheduleEventRendered.bind(this)} \n              // showQuickInfo={false}\n              popupOpen={this.onEditSchedulePopupOpen.bind(this)}\n              popupClose={this.onEditSchedulePopupClose.bind(this)}\n              >\n          <ViewsDirective>\n            <ViewDirective option='Day' />\n            <ViewDirective option='Week' />\n            <ViewDirective option='WorkWeek' />\n            <ViewDirective option='Month' />\n            <ViewDirective option='Agenda' />\n          </ViewsDirective>\n          <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\n        </ScheduleComponent>\n        <ToastComponent ref={toast => this.toastInstance = toast} \n          title={this.state.toastMsg.title} \n          content={this.state.toastMsg.content} \n          newestOnTop='true' \n          showProgressBar='true' \n          progressDirection='Ltr'\n          position={{X: 'Center', Y: 'Top'}} />\n      </div>\n    </div>\n    \n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}